#!/usr/bin/env bash

set -euo pipefail # STRICT MODE
IFS=$'\n\t'       # http://redsymbol.net/articles/unofficial-bash-strict-mode/

# TODO: Sunset this?
##########################################
# generic function to init containers
# init scripts are copied to
# the container and ran within the container
#
init_containerdb() {
  CONTAINERNAME=$1
  DBNAME=$(echo "$CONTAINERNAME" | cut -d_ -f2)
  CAPDBNAME="$(tr '[:lower:]' '[:upper:]' <<< ${DBNAME:0:1})${DBNAME:1}"
  docker cp init$CAPDBNAME $CONTAINERNAME:/tmp/init$CAPDBNAME
  docker exec $CONTAINERNAME /tmp/init$CAPDBNAME ${2:-}
}

##########################################
# methods to intialize various databases
#
init_mongo() {
  # only mongodb_read_only needs to be configured
  echo "configuring mongodb_read_only..."
  init_containerdb mongodb_read_only
}

init_metastore() {
  # a restart of the container is needed here due to
  # http://askubuntu.com/questions/308054/how-to-create-s-pgsql-5432
  echo "configuring metastore..."
  docker restart quasar_metastore
  docker cp initPostgresql quasar_metastore:/tmp/initPostgresql
  docker exec quasar_metastore /tmp/initPostgresql metastore
}

init_postgresql() {
  # a restart of the container is needed here due to
  # http://askubuntu.com/questions/308054/how-to-create-s-pgsql-5432
  echo "configuring postgresql..."
  docker restart postgresql
  init_containerdb postgresql "quasar-test"
}

init_couchbase() {
  echo "configuring couchbase..."
  init_containerdb couchbase
}

init_marklogic() {
  # marklogic init script is ran from outside
  # the container due to this curl issue
  # curl: symbol lookup error: /lib64/libldap-2.4.so.2
  echo "configuring marklogic..."
  sleep 20
  ./initMarklogic $1 $2
}

##########################################
# parse arguments and run various
# database configuration scripts
#
apply_configuration() {
  CONTAINER=$1
  if [[ $CONTAINER == "quasar_mongodb_read_only" ]]; then init_mongo;                     fi
  if [[ $CONTAINER == "quasar_couchbase"         ]]; then init_couchbase;                 fi
  if [[ $CONTAINER == "quasar_marklogic_xml"     ]]; then init_marklogic $DOCKERIP 8001;  fi
  if [[ $CONTAINER == "quasar_marklogic_json"    ]]; then init_marklogic $DOCKERIP 9001;  fi
  if [[ $CONTAINER == "quasar_postgresql"        ]]; then init_postgresql;                fi
  if [[ $CONTAINER == "quasar_metastore"         ]]; then init_metastore;                 fi
}

configure_continers() {
  for CONTAINER in $1
    do
      apply_configuration $CONTAINER
  done
}


##########################################
# attach our shell to docker
# this allows us to run docker commands
#
enable_docker_env() {
  if [[ -x "$(command -v docker-machine)" ]]
  then
    echo "found docker-machine, adding it to env..."
    eval "$(docker-machine env --shell sh/bash default)"
    DOCKERIP=$(docker-machine ip default)
  else
    if [[ -x "$(command -v docker)" ]]
    then
      echo "docker is in your path, proceeding..."
      DOCKERIP=localhost
    else
      echo "docker needs to be installed in order to run: $0"
      exit 1
    fi
  fi
}

find_containers() {
  CONTAINERS=$(docker ps --filter "name=" | awk '{if(NR>1) print $NF}')
}

configure_all_live_containers() {
  if [[ ${TRAVIS:-} ]]
  then
    echo "in a travis environment, docker is in our path..."
  else
    echo "local environment, looking for docker..."
    find_continers
    configure_containers "$CONTAINERS"
  fi
}

create_database() {
  docker-compose up -d $1
}

usage() {
cat << EOF
Usage: $0 [-h] [-a] [-c TEST-CONF-KEY]
Create and configure mongo, couchbase, marklogic, and postgresql containers
for integration tests with Quasar.

  -h                   help (also trigged with no parameters): display this help and exit
  -a                   configure all currently running containers
  -c TEST-CONF-KEY     configure running container named TEST-CONF-KEY
  -u "key1 key2..."    use docker-compose up to create and configure a quoted list of TEST-CONF-KEYS
EOF
}

# if no args are passed in print usage
[ $# -eq 0 ] && usage

# command line parsing logic
while getopts ":hac:u:" opt; do
  case $opt in
    a)
      echo "configuring all containers..." >&2
      enable_docker_env
      configure_all_live_containers
      ;;
    c)
      echo "$OPTARG is being configured..." >&2
      enable_docker_env
      if [[ $OPTARG =~ "spark" ]]
      then
        echo "Will not make a container for spark*: $OPTARG"
      else
        apply_configuration $OPTARG
      fi
      ;;
    u)
      echo "bringing up the following containers: $OPTARG" >&2
      enable_docker_env
      for CONTAINER in $OPTARG
      do
        create_database $CONTAINER
        sleep 5
        apply_configuration $CONTAINER
      done
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
    h | *)
      usage
      exit 1
      ;;
  esac
done
